# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/configuration/app.html

# The name of this app. Must be unique within a project.
bixalcom:

  # The runtime the application uses.
  type: 'php:8.3'

  # https://docs.platform.sh/create-apps/app-reference/single-runtime-image.html#sizes
  size: AUTO

  dependencies:
    php:
      composer/composer: '^2'

    nodejs:
      # The .nvmrc allows us to install a specific version of nodejs using 'n'.
      # https://docs.platform.sh/languages/nodejs/node-version.html
      # We needed node 16 and the php 8.1 only came with 12.
      n: "*"
      # Require gulp to build front end assets.
      gulp-cli: "*"

  runtime:
    # Enable the redis extension so Drupal can communicate with the Redis cache.
    extensions:
      - redis
      - apcu
      - xdebug

  variables:
    env:
      N_PREFIX: /app/.global
    php:
      post_max_size: '300M'
      upload_max_filesize: '300M'

  # The relationships of the application with services or other applications.
  #
  # The left-hand side is the name of the relationship as it will be exposed
  # to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
  # side is in the form `<service name>:<endpoint name>`.
  relationships:
    database: 'database:mysql'
    redis: 'cache:redis'

  # The size of the persistent disk of the application (in MB).
  disk: 2048

  # The 'mounts' describe writable, persistent filesystem mounts in the application.
  mounts:
    # The default Drupal files directory.
    '/web/sites/default/files':
      source: local
      source_path: 'files'
    # Needed by upgrade status module by phpstan.
    '/web/sites/simpletest':
      source: local
      source_path: 'simpletest'
    # Drupal gets its own dedicated tmp directory. The settings.platformsh.php
    # file will automatically configure Drupal to use this directory.
    '/tmp':
      source: local
      source_path: 'tmp'
    # Private file uploads are stored outside the web root. The settings.platformsh.php
    # file will automatically configure Drupal to use this directory.
    '/private':
      source: local
      source_path: 'private'
    # Drush needs a scratch space for its own caches.
    '/.drush':
      source: local
      source_path: 'drush'
    # Drush will try to save backups to this directory, so it must be
    # writeable even though you will almost never need to use it.
    '/drush-backups':
      source: local
      source_path: 'drush-backups'
    # Drupal Console will try to save backups to this directory, so it must be
    # writeable even though you will almost never need to use it.
    '/.console':
      source: local
      source_path: 'console'
    'var':
      source: local
      source_path: var

  # Configuration of the build of this application.
  build:
    # Don't use composer, instead do it manually in build step. Otherwise,
    # when this builds locally for the first time, it will install composer 2 in
    # .platform/local/deps/php but for some reason, it does not see it and uses
    # the old /usr/local/bin. It's probably because whatever puts composer in $path
    # does not fire after composer 2 is installed, but before.
    flavor: none

  # The hooks executed at various points in the lifecycle of the application.
  hooks:
    # The build hook runs after Composer to finish preparing up your code.
    # No services are available but the disk is writeable.
    build: |
      # On Platform.sh, use a single container and install node 16 in it.
      # This broke for Mac users with VirtioFS:
      # https://github.com/docker/for-mac/issues/6277
      # Install the version specified in the .nvmrc file
      n auto

      # Reset the location hash to recognize the newly installed version
      hash -r
      # Finish setting node version.

      # Rebuild our front end dependencies and build assets.
      # Since remotely we are able to set a newer version of node IN the
      # PHP service, this command is run in the PHP service. Locally it is
      # run in a build step in lando.yml.
      $PLATFORM_APP_DIR/orch/build_node.sh

      # Don't install dev dependencies.
      export COMPOSER_DEV=0

      # PHP / Drupal build process.
      $PLATFORM_APP_DIR/orch/build.sh

      # Install storybook into the ./sb directory.
      if [[ "${PLATFORM_ENVIRONMENT_TYPE}" != "production" ]]; then
        echo "Installing StoryBook"
        npm install
        npx storybook build --output-dir sb
        rm -r "$PLATFORM_APP_DIR/node_modules"
      else
        echo "Skipping StoryBook installation.
      fi

    # The deploy hook runs after your application has been deployed and started.
    # Code cannot be modified at this point but the database is available.
    # The site is not accepting requests while this script runs so keep it
    # fast.
    deploy: |
      # On production and staging environments, the site is just updated.
      if ( [ "${PLATFORM_ENVIRONMENT_TYPE}" = "production" ] || [ "${PLATFORM_ENVIRONMENT_TYPE}" = "staging" ] ); then
        export DRUPAL_UPDATE_OR_INSTALL=update
      else
        export DRUPAL_UPDATE_OR_INSTALL=install
      fi
      php $PLATFORM_APP_DIR/orch/deploy_generate_drush_yml.php
      $PLATFORM_APP_DIR/orch/deploy.sh

    # The post deploy hook runs after the application has been deployed and is
    # running.
    post_deploy: |
      $PLATFORM_APP_DIR/orch/post_deploy.sh

  # The configuration of app when it is exposed to the web.
  web:
    locations:
      # All requests not otherwise specified follow these rules.
      '/':
        # The folder from which to serve static assets, for this location.
        #
        # This is a filesystem path, relative to the application root.
        root: 'web'

        # How long to allow static assets from this location to be cached.
        #
        # Can be a time in seconds, or -1 for no caching. Times can be
        # suffixed with "s" (seconds), "m" (minutes), "h" (hours), "d"
        # (days), "w" (weeks), "M" (months, as 30 days) or "y" (years, as
        # 365 days).
        expires: 5m

        # Redirect any incoming request to Drupal's front controller.
        passthru: '/index.php'

        # Allow 300M files to be uploaded.
        request_buffering:
          enabled: true
          max_request_size: 320m

        # Deny access to all static files, except those specifically allowed below.
        allow: false

        # Rules for specific URI patterns.
        rules:
          # Allow access to common static files.
          '\.(jpe?g|png|gif|svgz?|css|js|map|ico|bmp|eot|woff|woff2|otf|ttf|webp)$':
            allow: true
          '^/robots\.txt$':
            allow: true
          '^/sitemap\.xml$':
            allow: true

          # Deny direct access to configuration files.
          '^/sites/sites\.php$':
            scripts: false
          '^/sites/[^/]+/settings.*?\.php$':
            scripts: false

      # The files directory has its own special configuration rules.
      '/sites/default/files':
        # Allow access to all files in the public files directory.
        allow: true
        expires: 5m
        passthru: '/index.php'
        root: 'web/sites/default/files'

        # Do not execute PHP scripts from the writeable mount.
        scripts: false

        rules:
          # Provide a longer TTL (2 weeks) for aggregated CSS and JS files.
          '^/sites/default/files/(css|js)':
            expires: 2w
      "/sb":
        root: "sb"
        passthru: true
        index: ["index.html"]
        allow: true

  crons:
    # Run Drupal's cron tasks every 60 minutes.
    drupal:
      spec: '0 * * * *'
      commands:
        start: 'cd web ; drush core-cron'
    upload_logs_to_s3:
      spec: '0 * * * *'
      commands:
        start: '[ "$PLATFORM_BRANCH" = main ] && bash cron/upload_logs_to_s3.sh'

#storybook:
#  type: nodejs:18
#
#  # https://docs.platform.sh/create-apps/app-reference/single-runtime-image.html#sizes
#  # Running out of resources in prod because this added a HIGH_CPU profile.
#  # Lower the size.
#  size: S
#
#  web:
#    locations:
#      '/':
#        # The folder from which to serve static assets, for this location.
#        #
#        # This is a filesystem path, relative to the application root.
#        root: 'storybook-static'
#
#        # How long to allow static assets from this location to be cached.
#        #
#        # Can be a time in seconds, or -1 for no caching. Times can be
#        # suffixed with "s" (seconds), "m" (minutes), "h" (hours), "d"
#        # (days), "w" (weeks), "M" (months, as 30 days) or "y" (years, as
#        # 365 days).
#        expires: 5m
#
#        # Allow storybook's landing .html file to be picked up when going to /.
#        index:
#          - 'index.html'
#
#        # Disable server side scripts.
#        scripts: false
#
#        # Allow access to all static files.
#        allow: true
#
#    commands:
#      # Run a no-op process that uses no CPU resources since this is a static site
#      start: sleep infinity
#
#  hooks:
#    build: |
#      # Building for a sub-dir caused a 502 on platform that I could not
#      # figure out.
#      # BASE_PATH=/sb npm run build-storybook
#      npm run build-storybook
